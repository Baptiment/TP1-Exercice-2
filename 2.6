#include <PID_v1.h>

/**
 
PID Basic Example
Reading analog input 0 to control analog PWM output
**/

#include <PID_v1.h>
const int photores = A1; // entree photoresistance
const int pot = A0; // entree potentiometre
const int led = 11; // pin de la led
double lightLevel; // variable qui stocke le niveau de lumière entrant

// parametres de régulation
float Kp=5; // valeur initiale du gain proportionnel 
float Ki=0.5; // valeur initiale du gain intégral 
float Kd=5;  // valeur initiale du gain différentiel

double Consigne, Entree, Sortie;  //Variables pour stocker les valeurs
PID myPID(&Entree, &Sortie, &Consigne, Kp, Ki, Kd, DIRECT); 

const int sampleRate = 1; // Variable qui détermine la vitesse à  laquelle le PID tourne

// Parametrage de la communication
const long serialPing = 500; //Cela determine a quelle periode on ping la boucle (en ms)
unsigned long now = 0; //Cette variable sert à  compter le temps
unsigned long lastMessage = 0; //Cette variable permet de garder une trace de quand notre boucle a communique avec le port serie pour la derniere fois

void setup(){
  lightLevel = analogRead(photores); //Lire le niveau
  Entree = map(lightLevel, 0, 1024, 0, 255); //Changer les amplitudes
  Consigne = map(analogRead(pot), 0, 1024, 0, 255);  //Lire la consigne
  Serial.begin(9600); //Commencer une communication via le port serie
  myPID.SetMode(AUTOMATIC);  //Demarrer la regulation PID
  myPID.SetSampleTime(sampleRate); //Regle la periode d'echantillonnage

  Serial.println("Debut"); // On commence
  lastMessage = millis(); // Marque du temps
}
void loop(){
  Consigne = map(analogRead(pot), 0, 1024, 0, 255); //Lire la consigne
  lightLevel = analogRead(photores); //Obtenir le niveau lumineux
  Entree = map(lightLevel, 0, 900, 0, 255); //En deduire l'entree
  myPID.Compute();  //Faire tourner la boucle PID
  analogWrite(led, Sortie);  //Ecrire la sortie du PID comme entree MLI de la LED

  now = millis(); // Marque du temps
  if(now - lastMessage > serialPing) { 
    Serial.print("Consigne = ");// Affiche "Consigne ="
    Serial.print(Consigne);// Affiche la valeur de la consigne
    Serial.print(" Entree = ");// Affiche "Entree ="
    Serial.print(Entree); // Affiche la valeur de la consigne
    Serial.print(" Sortie = ");// Affiche "Sortie ="
    Serial.print(Sortie); // Affiche la valeur de la Sortie
    Serial.print("\n"); // Affiche "\n"
    if (Serial.available() > 0) { //Nous voulons mettre a jour Kp, Ki et Kd
      for (int x = 0; x < 4; x++) {
        switch (x) {
          case 0: // Lecture de la valeur 0
            Kp = Serial.parseFloat();
            break;
          case 1: // Lecture de la valeur 1
            Ki = Serial.parseFloat();
            break;
          case 2: // Lecture de la valeur 2
            Kd = Serial.parseFloat();
            break;
          case 3: // Lecture de la valeur 3
            for (int y = Serial.available(); y == 0; y--) {
              Serial.read();
            }
            break;
        }
      }
      Serial.print(" Kp,Ki,Kd = "); // Affiche " Kp,Ki,Kd ="
      Serial.print(Kp); //Affiche la valeur Kp
      Serial.print(",");// Affiche ","
      Serial.print(Ki); // Affiche la valeur Ki
      Serial.print(","); //Affiche ","
      Serial.println(Kd);  //On affiche la valeur Kd, On affiche les valeurs pour verifier qu'elles ont bien ete mises a jour
      myPID.SetTunings(Kp, Ki, Kd); //On regle les nouveaux parametres du PID et on relance la regulation
    }

    lastMessage = now; 
    //Marque du temps. 
  }

}
